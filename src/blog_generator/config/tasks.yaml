research_task:
  agent: researcher
  description: |
    Conduct comprehensive research on {topic} following this systematic approach:

    1. **Fundamental Concepts (Beginner Level)**:
       - What is {topic} and its core principles?
       - What problems does {topic} solve?
       - What are the basic components and terminology?
       - What are the fundamental use cases?
       - What are the prerequisites and basic requirements?

    2. **Technical Architecture (Intermediate Level)**:
       - What is the system architecture of {topic}?
       - What are the core components and their roles?
       - How do components interact with each other?
       - What are the data flows and processing patterns?
       - What are the integration points and APIs?

    3. **Implementation Details (Intermediate-Advanced)**:
       - How is {topic} implemented in practice?
       - What are the setup and configuration requirements?
       - What are the different implementation patterns?
       - What are the API specifications and protocols?
       - What are the common integration scenarios?

    4. **Advanced Features and Patterns (Advanced Level)**:
       - What are the advanced features and capabilities?
       - What are the performance optimization techniques?
       - What are the scaling and high-availability patterns?
       - What are the security considerations and best practices?
       - What are the monitoring and observability patterns?

    5. **Real-World Applications**:
       - What are the primary use cases and applications?
       - What industries are adopting {topic}?
       - What are the success stories and case studies?
       - What are the performance benchmarks and metrics?
       - What are the limitations and trade-offs?

    6. **Best Practices and Guidelines**:
       - What are the recommended implementation patterns?
       - What are the common pitfalls and anti-patterns?
       - What are the security guidelines and considerations?
       - What are the monitoring and maintenance strategies?
       - What are the troubleshooting and debugging approaches?

    7. **Integration and Deployment**:
       - How does {topic} integrate with other systems?
       - What are the deployment options and strategies?
       - What are the containerization and orchestration patterns?
       - What are the CI/CD integration patterns?
       - What are the production deployment considerations?

    8. **Future Trends and Considerations**:
       - What are the emerging trends and developments?
       - What are the potential challenges and solutions?
       - What are the upgrade and migration strategies?
       - What are the long-term maintenance considerations?
       - What are the community and ecosystem developments?

    **Research Requirements**:
    - Cover content from basic concepts to advanced implementation
    - Find practical code examples and configurations
    - Identify architectural patterns and system designs
    - Locate performance benchmarks and optimization techniques
    - Discover real-world case studies and success stories
    - Find integration examples and deployment patterns
    - Include security considerations and best practices
    - Look for monitoring, troubleshooting, and maintenance guidance
    - Ensure content is suitable for both beginners and advanced practitioners

  expected_output: |
    A comprehensive research report on {topic} structured as follows:

    ## Executive Summary
    Brief overview of {topic} and its significance in the industry

    ## Fundamental Concepts
    - Core principles and basic terminology
    - Problem domain and use cases
    - Basic components and architecture
    - Prerequisites and requirements

    ## Technical Architecture
    - System components and their roles
    - Component interactions and data flows
    - Integration points and APIs
    - Deployment models and patterns

    ## Implementation Guide
    - Setup and configuration requirements
    - API specifications and protocols
    - Common implementation patterns
    - Code examples and configurations

    ## Advanced Features
    - Advanced capabilities and features
    - Performance optimization techniques
    - Scaling and high-availability patterns
    - Security considerations and best practices

    ## Integration Patterns
    - Integration scenarios and use cases
    - API endpoints and protocols
    - Data formats and schemas
    - Deployment and orchestration patterns

    ## Real-World Applications
    - Industry applications and case studies
    - Success stories and performance metrics
    - Implementation examples and results
    - Limitations and trade-offs

    ## Best Practices
    - Implementation patterns and guidelines
    - Security considerations and practices
    - Monitoring and observability strategies
    - Troubleshooting and maintenance procedures

    ## Future Considerations
    - Emerging trends and developments
    - Potential challenges and solutions
    - Upgrade and migration strategies
    - Long-term maintenance considerations

    **Format Requirements**:
    - Include code examples from basic to advanced
    - Provide architectural diagrams and patterns
    - Include performance metrics and benchmarks
    - Add integration patterns and examples
    - Show real-world implementations
    - Cover security and best practices
    - Target length: 4000-6000 words
    - Ensure content progression from basic to advanced

  metadata:
    type: research
    format: markdown
    min_length: 4000
    max_length: 6000
    research_depth: comprehensive
    content_levels: [beginner, intermediate, advanced]
    source_requirements: practical_examples_and_code

technical_writer_task:
  agent: technical_writer
  description: |
    Using the comprehensive research provided, create a detailed technical article about {topic} that follows these guidelines:

    1. **Article Structure and Flow**:
       - Start with a clear problem statement and solution overview
       - Follow a logical progression from concepts to implementation
       - Include clear technical diagrams and visualizations
       - Provide practical code examples and patterns
       - End with actionable insights and next steps

    2. **Technical Visualization**:
       - Create system architecture diagrams
       - Include component interaction diagrams
       - Add data flow visualizations
       - Show integration patterns
       - Illustrate deployment scenarios
       - Visualize performance metrics

    3. **Implementation Details**:
       - Provide detailed technical specifications
       - Include code examples with explanations
       - Show configuration patterns
       - Demonstrate API usage
       - Explain integration approaches
       - Cover error handling

    4. **Use Cases and Examples**:
       - Present real-world applications
       - Show industry-specific implementations
       - Include success stories and metrics
       - Demonstrate practical solutions
       - Provide benchmark results

    5. **Best Practices and Guidelines**:
       - Document implementation patterns
       - Explain security considerations
       - Cover performance optimization
       - Include monitoring strategies
       - Provide maintenance guidance

    6. **Integration and Deployment**:
       - Show integration patterns
       - Explain deployment options
       - Cover scaling strategies
       - Include security measures
       - Discuss monitoring approaches

    7. **Troubleshooting and Support**:
       - Address common challenges
       - Provide solution patterns
       - Include debugging strategies
       - Cover maintenance aspects
       - List support resources

    8. **Future Considerations**:
       - Discuss scalability aspects
       - Cover potential challenges
       - Include upgrade strategies
       - Address future needs
       - Suggest improvement paths

  expected_output: |
    A comprehensive technical article about {topic} that includes:

    ## Introduction
    - Problem statement and context
    - Solution overview
    - Technical benefits
    - Implementation considerations

    ## Technical Overview
    - Core concepts and architecture
    - System components
    - Technical requirements
    - Integration points
    - Architecture diagram

    ## Implementation Guide
    - Setup and configuration
    - Code examples
    - API usage
    - Integration patterns
    - Error handling
    - Performance considerations

    ## Use Cases
    - Industry applications
    - Implementation examples
    - Success stories
    - Performance metrics
    - Cost-benefit analysis

    ## Best Practices
    - Implementation patterns
    - Security guidelines
    - Performance optimization
    - Monitoring strategies
    - Maintenance procedures

    ## Integration and Deployment
    - Integration patterns
    - Deployment options
    - Scaling strategies
    - Security measures
    - Monitoring setup

    ## Troubleshooting Guide
    - Common challenges
    - Solution patterns
    - Debugging strategies
    - Performance tuning
    - Support resources

    ## Future Considerations
    - Scalability planning
    - Upgrade strategies
    - Future challenges
    - Improvement paths
    - Long-term maintenance

    **Content Requirements**:
    - Professional technical writing
    - Clear explanations
    - Practical code examples
    - System diagrams
    - Performance metrics
    - Integration patterns
    - Security guidelines
    - Target length: 4000-6000 words

  metadata:
    type: content
    format: markdown
    min_length: 4000
    max_length: 6000
    seo_optimized: true
    technical_depth: comprehensive
    audience: technical_professionals

technical_reviewer_task:
  agent: technical_reviewer
  description: |
    Conduct a comprehensive review of the Medium-style technical article about "{topic}" following these evaluation criteria:

    1. **Article Structure and Storytelling**:
       - Does the article have a compelling hook?
       - Is the "What, Why, When, How" structure clear?
       - Does the storytelling maintain engagement?
       - Are transitions smooth and logical?
       - Is the content flow professional and polished?

    2. **Visual Content and Diagrams**:
       - Are the diagrams clear and professional?
       - Do visuals effectively explain complex concepts?
       - Are code blocks properly formatted and highlighted?
       - Are comparisons visually presented?
       - Are there enough visual aids?

    3. **Technical Accuracy and Depth**:
       - Is the technical information accurate?
       - Are concepts explained at the right depth?
       - Are comparisons fair and well-researched?
       - Are pros and cons properly analyzed?
       - Are performance claims substantiated?

    4. **Practical Value**:
       - Are the examples realistic and useful?
       - Are implementation details complete?
       - Are best practices well-explained?
       - Are common challenges addressed?
       - Is troubleshooting guidance practical?

    5. **Use Cases and Examples**:
       - Are case studies detailed and realistic?
       - Do examples cover different scenarios?
       - Are metrics and results included?
       - Are lessons learned valuable?
       - Are success stories credible?

    6. **Professional Writing Quality**:
       - Is the writing style professional?
       - Is technical jargon appropriately used?
       - Is the tone consistent and engaging?
       - Are explanations clear and concise?
       - Is the article well-edited?

    7. **Visual Appeal and Formatting**:
       - Is the layout professional?
       - Are sections well-organized?
       - Are headings and subheadings effective?
       - Is the content scannable?
       - Are emphasis and formatting consistent?

    8. **Actionable Insights**:
       - Are takeaways clear and actionable?
       - Are next steps well-defined?
       - Is further reading suggested?
       - Are resources properly linked?
       - Is the conclusion impactful?

  expected_output: |
    A comprehensive review report for the Medium-style technical article about "{topic}" with the following sections:

    ## Executive Summary
    Overall assessment of article quality and readiness for publication on Medium

    ## Storytelling and Structure
    - **Hook and Introduction**: Effectiveness of the opening
    - **Content Flow**: Logical progression and transitions
    - **Engagement**: How well the article maintains reader interest
    - **Conclusion**: Impact and call-to-action effectiveness

    ## Visual Content Assessment
    - **Diagrams**: Quality and clarity of technical diagrams
    - **Code Blocks**: Formatting and presentation
    - **Visual Aids**: Effectiveness of supporting visuals
    - **Layout**: Overall visual appeal and professionalism

    ## Technical Content Review
    - **Accuracy**: Technical correctness and currency
    - **Depth**: Appropriate level of technical detail
    - **Examples**: Quality of code and implementation examples
    - **Comparisons**: Fairness and completeness of analysis

    ## Practical Value Assessment
    - **Use Cases**: Relevance and completeness
    - **Implementation**: Clarity of guidance
    - **Best Practices**: Comprehensiveness and accuracy
    - **Problem Solving**: Effectiveness of solutions

    ## Writing Quality Analysis
    - **Style**: Professional writing quality
    - **Clarity**: Clear explanations of complex concepts
    - **Tone**: Consistency and appropriateness
    - **Editing**: Grammar, spelling, and formatting

    ## Specific Recommendations
    - **Content Improvements**: Areas needing enhancement
    - **Visual Enhancements**: Suggested diagram or visual additions
    - **Structure Adjustments**: Organization improvements
    - **Technical Clarifications**: Points needing elaboration

    ## Publication Readiness
    - **Overall Score**: 1-10 rating with justification
    - **Critical Issues**: Must-fix items before publication
    - **Enhancement Suggestions**: Nice-to-have improvements
    - **SEO Recommendations**: Title, tags, and keywords

    **Review Requirements**:
    - Focus on professional, Medium-style quality
    - Ensure technical accuracy and depth
    - Verify visual content effectiveness
    - Check storytelling and engagement
    - Validate practical value
    - Assess writing quality and polish

  metadata:
    type: review
    format: markdown
    review_depth: comprehensive
    focus_areas:
      [
        storytelling,
        visual_content,
        technical_accuracy,
        practical_value,
        professional_quality,
      ]

technical_publisher_task:
  agent: technical_publisher
  description: |
    1. Review and incorporate the technical reviewer's feedback to ensure the article meets Medium's high-quality standards
    2. Ensure the article includes:
       - Professional diagrams and visuals
       - Properly formatted code blocks with syntax highlighting
       - Clear section breaks and subheadings
       - Pull quotes for important insights
       - Properly formatted lists and tables
       - Consistent formatting and styling
    3. Add comprehensive Medium-optimized metadata:
       - Title: "{topic}: A Comprehensive Technical Guide"
       - Subtitle: "Learn how to implement and deploy {topic} in production environments"
       - Author: "AI Blog Writer"
       - Publication date: Current date
       - Tags: ["{topic}", "Technology", "Programming", "Software Development", "Tutorial"]
       - Reading time: Based on content length
       - Featured image: Suggest appropriate technical diagram or illustration
    4. Format the content for Medium with:
       - Proper markdown formatting
       - Gist embeds for code blocks
       - Mermaid diagrams for architecture and flows
       - Image placeholders for diagrams and screenshots
       - Pull quote formatting for key insights
       - Clear section breaks with horizontal rules
       - Consistent heading hierarchy
    5. Optimize for Medium engagement:
       - Add relevant tags for discoverability
       - Include clear calls-to-action
       - Format for easy scanning
       - Use proper image captions
       - Include relevant links
       - Add author bio and credentials
    6. Save content as a markdown file with proper format using the save_blog_post function
    7. Ensure all assets (images, diagrams) are properly referenced
  expected_output: >
    A professionally formatted Medium article about "{topic}" that includes:
    - Complete technical content with visuals
    - Professional diagrams and code examples
    - Proper Medium-style formatting
    - Optimized metadata and tags
    - All necessary assets and references
    Formatted as markdown with proper frontmatter
  metadata:
    type: publish
    format: markdown
    markdown: true
    output_file: '{topic}_{timestamp}.md'
    output_dir: './output'
    frontmatter:
      title: '{topic}: A Comprehensive Technical Guide'
      subtitle: 'Learn how to implement and deploy {topic} in production environments'
      author: 'AI Blog Writer'
      date: '{current_date}'
      timestamp: '{timestamp}'
      slug: '{topic}-comprehensive-technical-guide'
      tags:
        [
          '{topic}',
          'Technology',
          'Programming',
          'Software Development',
          'Tutorial',
        ]
      categories: ['Programming', 'Technology', 'Tutorials']
      reading_time: '{estimated_time}'
      featured_image: '{topic}_architecture.png'
      status: 'published'
      featured: true
      publication: 'Towards AI'
      series: 'Technical Guides'
      canonical_url: ''
